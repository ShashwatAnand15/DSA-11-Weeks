Time complexity of all searching and sorting algorithms (All log are base 2)
https://www.hackerearth.com/practice/notes/sorting-and-searching-algorithms-time-complexities-cheat-sheet/

Height of CBT(Complete Binary Tree) -> O(logn)
Insertion in Heap -> O(logn)
Construct Heap ->O(nlogn)
Delete from Heap ->O(logn)
Huffman ->O(nlogn)
### V = Vertices, E = Edges
Prims algorithm ->For matrix O(n^2), For Heap O((V+E)logV) 
Kruskal algorithm ->O(ElogE)
DFS -> O(V + E)
BFS -> O(V + E)
All pair shortest (Floyd Warshall) -> O(n^3)
Dijkstra -> O(V^2)


EXTRA:
Time complexity of the following loop:
for (int i = 0; i <=n-1; i=i+j){        // this i=i+j is effectively i=i+k
    for(int j=i+1; j<=k; j++){
        // constant work
    }
}

Inner loop runs k times
Outer loops runs n/k times
Total time (n/k)*k = O(n) Ans
